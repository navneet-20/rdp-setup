name: Free RDP (RustDesk Auto Latest Windows)

on:
  # This triggers the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # Use the latest Windows runner
    runs-on: windows-latest
    # Set the timeout for the session (360 minutes = 6 hours)
    timeout-minutes: 360

    steps:
    - name: Set up job
      run: echo "üöÄ Starting RustDesk setup..."

    - name: Download Latest RustDesk Release (Windows)
      shell: pwsh
      run: |
        # Fetch latest release info
        $latest = Invoke-RestMethod -Uri "https://api.github.com/repos/rustdesk/rustdesk/releases/latest"
        Write-Host "üì¶ Latest version: $($latest.tag_name)"
        Write-Host "üîç Available assets:"
        $latest.assets | ForEach-Object { Write-Host " - $($_.name)" }

        # Match correct Windows release (exe or msi)
        $asset = $latest.assets | Where-Object {
            $_.name -match "x86_64.*\.exe$" -or $_.name -match "x86.*\.exe$" -or $_.name -match "\.msi$"
        } | Select-Object -First 1

        if (-not $asset) {
            Write-Host "‚ùå No suitable Windows asset found."
            exit 1
        }

        Write-Host "‚¨áÔ∏è Downloading: $($asset.name)"
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $asset.name

        # Get EXE file path
        $exe = Get-Item $asset.name
        if (-not $exe) {
            Write-Host "‚ùå rustdesk executable not found!"
            exit 1
        }

        Write-Host "üü¢ RustDesk executable path: $($exe.FullName)"
        # Save the path for the next step
        $exe.FullName | Out-File -FilePath "rustdesk_path.txt" -Encoding utf8

    # --- ADJUSTED STEP: Enhanced file location check ---
    - name: Run RustDesk & Show ID (Adjusted for Runner)
      shell: pwsh
      run: |
        $exePath = Get-Content -Path "rustdesk_path.txt" -Raw
        Write-Host "üöÄ Launching RustDesk from: $exePath"
        
        # Start RustDesk process in the background
        Start-Process -FilePath $exePath
        Start-Sleep -Seconds 15 # Give it a moment to initialize

        # Define potential configuration directories
        $configDir_APPDATA = "$env:APPDATA\RustDesk"
        $configDir_PROGDATA = "$env:PROGRAMDATA\RustDesk"

        $idFile_APPDATA = Join-Path $configDir_APPDATA "id"
        $passFile_APPDATA = Join-Path $configDir_APPDATA "password"
        
        $idFile_PROGDATA = Join-Path $configDir_PROGDATA "id"
        $passFile_PROGDATA = Join-Path $configDir_PROGDATA "password"

        $found = $false
        Write-Host "‚åõ Waiting for RustDesk ID to be generated (checking APPDATA and PROGRAMDATA)..."
        
        # Loop for up to 30 intervals (150 seconds total wait time)
        for ($i=0; $i -lt 30; $i++) {
          # Check APPDATA location
          if ((Test-Path $idFile_APPDATA) -and (Test-Path $passFile_APPDATA)) {
            Write-Host "--- CREDENTIALS FOUND (APPDATA) ---"
            Write-Host "ü™™ RustDesk ID: $(Get-Content $idFile_APPDATA)"
            Write-Host "üîë Password: $(Get-Content $passFile_APPDATA)"
            $found = $true
            break
          }
          # Check PROGRAMDATA location
          if ((Test-Path $idFile_PROGDATA) -and (Test-Path $passFile_PROGDATA)) {
            Write-Host "--- CREDENTIALS FOUND (PROGRAMDATA) ---"
            Write-Host "ü™™ RustDesk ID: $(Get-Content $idFile_PROGDATA)"
            Write-Host "üîë Password: $(Get-Content $passFile_PROGDATA)"
            $found = $true
            break
          }
          Start-Sleep -Seconds 5
        }

        if (-not $found) {
          Write-Host "üö® ERROR: RustDesk ID and Password files not found after 2.5 minutes in either APPDATA or PROGRAMDATA."
          # Note: The script will continue to keep the session alive even if credentials aren't found, 
          # but you won't be able to connect unless the files appeared later.
        }

        Write-Host "üïì Keeping session alive for 6 hours (21600 seconds)..."
        # This final sleep step is what keeps the runner running for your RDP session.
        Start-Sleep -Seconds 21600

    - name: Complete job
      run: echo "‚úÖ RustDesk job completed successfully (Runner is now shutting down)."
